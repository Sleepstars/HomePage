---
// Theme toggle component for dark/light mode switching
---

<button
  id="theme-toggle"
  class="p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors duration-200"
  aria-label="Toggle theme"
>
  <svg id="theme-toggle-light-icon" class="w-5 h-5 hidden" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
    <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"></path>
  </svg>
  <svg id="theme-toggle-dark-icon" class="w-5 h-5 hidden" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
  </svg>
</button>

<script>
  function initTheme() {
    const theme = (() => {
      if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
        return localStorage.getItem('theme');
      }
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'dark';
      }
      return 'light';
    })();

    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }

    window.localStorage.setItem('theme', theme || 'light');
  }

  function updateIcons() {
    const lightIcon = document.getElementById('theme-toggle-light-icon');
    const darkIcon = document.getElementById('theme-toggle-dark-icon');
    const isDark = document.documentElement.classList.contains('dark');

    if (lightIcon && darkIcon) {
      if (isDark) {
        lightIcon.classList.remove('hidden');
        darkIcon.classList.add('hidden');
      } else {
        lightIcon.classList.add('hidden');
        darkIcon.classList.remove('hidden');
      }
    }
  }

  function initThemeToggle() {
    initTheme();
    updateIcons();

    const handleToggleClick = async (event: MouseEvent) => {
      const element = document.documentElement;
      const isDark = element.classList.contains('dark');

      // Check if View Transitions API is supported
      if (!document.startViewTransition) {
        element.classList.toggle('dark');
        localStorage.setItem('theme', isDark ? 'light' : 'dark');
        updateIcons();
        return;
      }

      // Get click position
      const x = event.clientX;
      const y = event.clientY;

      // Calculate the radius needed to cover the entire screen
      const endRadius = Math.hypot(
        Math.max(x, innerWidth - x),
        Math.max(y, innerHeight - y)
      );

      // Start view transition
      const transition = document.startViewTransition(() => {
        element.classList.toggle('dark');
        localStorage.setItem('theme', isDark ? 'light' : 'dark');
      });

      // Animate the transition with circular reveal
      await transition.ready;

      document.documentElement.animate(
        {
          clipPath: [
            `circle(0px at ${x}px ${y}px)`,
            `circle(${endRadius}px at ${x}px ${y}px)`
          ]
        },
        {
          duration: 500,
          easing: 'ease-in-out',
          pseudoElement: '::view-transition-new(root)'
        }
      );

      updateIcons();
    };

    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      // Remove existing listeners by cloning and replacing
      const newThemeToggle = themeToggle.cloneNode(true) as HTMLElement;
      themeToggle.parentNode?.replaceChild(newThemeToggle, themeToggle);
      newThemeToggle.addEventListener('click', handleToggleClick);
    }
  }

  // Initialize on page load
  document.addEventListener('astro:page-load', initThemeToggle);
</script>
